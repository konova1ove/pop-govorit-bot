const TelegramBot = require('node-telegram-bot-api');
const { parseDate } = require('./dateParser');
const { getOrthodoxEvent } = require('./calendar');
const { formatResponse } = require('./formatter');

const token = process.env.BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, 
    '๐๏ธ ะะพะฑัะพ ะฟะพะถะฐะปะพะฒะฐัั, ะฑัะฐัะธะต!\n\n' +
    'ะัะธััะปะฐะนัะต ะผะฝะต ัะพะพะฑัะตะฝะธั ั ะดะฐัะฐะผะธ, ะธ ั ะทะฐะผะตะฝั ะธั ะฝะฐ ัะตัะบะพะฒะฝัะต ะฟัะฐะทะดะฝะธะบะธ ัะพ ััะฐัะพััััะบะธะผ ะฐะบัะตะฝัะพะผ.\n\n' +
    '๐ ะัะธะผะตัั:\n' +
    'โข "ะัััะตัะธะผัั ะฒ ะฒะพัะบัะตัะตะฝัะต"\n' +
    'โข "ะะพ 25 ะดะตะบะฐะฑัั ะพััะฐะปะพัั ะผะฐะปะพ"\n' +
    'โข "ะ 3 ัะตะฝััะฑัั ะฟะพะดะณะพัะพะฒะธะผัั"\n\n' +
    'โช ะกะพะฑะปัะดะฐั ะฟะฐะดะตะถะธ ะธ ะณะพะฒะพัั, ะบะฐะบ ะฝะฐััะพััะธะน ะฟะพะฟ ะธะปะธ ะฝะฐะฑะพะถะฝะฐั ะฑะฐะฑัะปั!'
  );
});

bot.onText(/\/help/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId,
    '๐ฟ ะะฐะบ ะฟะพะปัะทะพะฒะฐัััั ะฑะพัะพะผ:\n\n' +
    '1๏ธโฃ ะัะฟัะฐะฒััะต ัะพะพะฑัะตะฝะธะต ั ะปัะฑะพะน ะดะฐัะพะน\n' +
    '2๏ธโฃ ะะพะปััะธัะต ะพัะฒะตั ั ัะตัะบะพะฒะฝัะผ ะฟัะฐะทะดะฝะธะบะพะผ\n' +
    '3๏ธโฃ ะะตัะตัะปะธัะต ะฒ ะฝัะถะฝัะน ัะฐั\n\n' +
    '๐ง ะะพะผะฐะฝะดั:\n' +
    '/start - ะฝะฐัะฐัั ัะฐะฑะพัั\n' +
    '/help - ััะฐ ะฟะพะผะพัั\n' +
    '/about - ะพ ะฑะพัะต\n\n' +
    '๐ ะะพั ะฟะพะฝะธะผะฐะตั: ัะธัะปะฐ (25.12, 3 ัะฝะฒะฐัั), ะดะฝะธ ะฝะตะดะตะปะธ (ะฒ ะฒะพัะบัะตัะตะฝัะต), ัะปะพะฒะฐ (ะทะฐะฒััะฐ, ะฟะพัะปะตะทะฐะฒััะฐ)'
  );
});

bot.onText(/\/about/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId,
    'โช ะัะฐะฒะพัะปะฐะฒะฝัะน ะบะฐะปะตะฝะดะฐัั-ะฑะพั "ะะพะฟ ะะพะฒะพัะธั"\n\n' +
    '๐ ะะตััะธั: 1.0.0\n' +
    '๐ ะะฐะปะตะฝะดะฐัั: 2025-2026\n' +
    '๐๏ธ ะกัะธะปั: ัะตัะบะพะฒะฝะพ-ัะปะฐะฒัะฝัะบะธะน\n' +
    '๐ฟ ะะพะปะธัะฒั: ะฒัััะพะตะฝะฝัะต\n\n' +
    'โจ ะกะพะทะดะฐะฝ ะดะปั ะฑะปะฐะณะพัะตััะธะฒะพะณะพ ะพะฑัะตะฝะธั ะฒ ัะฐัะฐั.\n' +
    'ะกะปะฐะฒะฐ ะะพะณั ะทะฐ ะฒัะต! ๐'
  );
});

bot.on('message', (msg) => {
  if (msg.text && !msg.text.startsWith('/')) {
    const chatId = msg.chat.id;
    const text = msg.text;
    
    try {
      console.log(`ะะฑัะฐะฑะฐััะฒะฐะตะผ ัะพะพะฑัะตะฝะธะต: "${text}"`);
      const dates = parseDate(text);
      
      if (dates.length === 0) {
        return; // ะะต ะฝะฐะนะดะตะฝั ะดะฐัั - ะฝะต ะพัะฒะตัะฐะตะผ
      }

      console.log(`ะะฐะนะดะตะฝะพ ะดะฐั: ${dates.length}`);
      let responseText = text;
      
      // ะกะพััะธััะตะผ ะฟะพ ะฟะพะทะธัะธะธ ะฒ ัะตะบััะต (ัะฟัะฐะฒะฐ ะฝะฐะปะตะฒะพ)
      const sortedDates = dates
        .map(d => ({ ...d, position: text.indexOf(d.originalText) }))
        .sort((a, b) => b.position - a.position);
      
      for (const dateInfo of sortedDates) {
        const orthodoxEvent = getOrthodoxEvent(dateInfo.date);
        const formattedEvent = formatResponse(orthodoxEvent, dateInfo.case);
        console.log(`ะะฐะผะตะฝัะตะผ "${dateInfo.originalText}" ะฝะฐ "${formattedEvent}"`);
        responseText = responseText.replace(dateInfo.originalText, formattedEvent);
      }

      bot.sendMessage(chatId, responseText);
      
    } catch (error) {
      console.error('ะัะธะฑะบะฐ ะฟัะธ ะพะฑัะฐะฑะพัะบะต ัะพะพะฑัะตะฝะธั:', error);
    }
  }
});

console.log('๐ค ะัะฐะฒะพัะปะฐะฒะฝัะน ะฑะพั "ะะพะฟ ะะพะฒะพัะธั" ะทะฐะฟััะตะฝ! ะะดะตะผ ัะพะบะตะฝ ะฒ ะฟะตัะตะผะตะฝะฝะพะน BOT_TOKEN...');

process.on('SIGINT', () => {
  console.log('๐ ะะพั ะพััะฐะฝะพะฒะปะตะฝ');
  process.exit();
});