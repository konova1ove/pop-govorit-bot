const TelegramBot = require('node-telegram-bot-api');
const { parseDate } = require('./dateParser');
const { getOrthodoxEvent } = require('./calendar');
const { formatResponse } = require('./formatter');

const token = process.env.BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, 
    '๐๏ธ ะะพะฑัะพ ะฟะพะถะฐะปะพะฒะฐัั, ะฑัะฐัะธะต!\n\n' +
    'ะัะธััะปะฐะนัะต ะผะฝะต ัะพะพะฑัะตะฝะธั ั ะดะฐัะฐะผะธ, ะธ ั ะทะฐะผะตะฝั ะธั ะฝะฐ ัะตัะบะพะฒะฝัะต ะฟัะฐะทะดะฝะธะบะธ ัะพ ััะฐัะพััััะบะธะผ ะฐะบัะตะฝัะพะผ.\n\n' +
    '๐ ะัะธะผะตัั:\n' +
    'โข "ะัััะตัะธะผัั ะฒ ะฒะพัะบัะตัะตะฝัะต"\n' +
    'โข "ะะพ 25 ะดะตะบะฐะฑัั ะพััะฐะปะพัั ะผะฐะปะพ"\n' +
    'โข "ะ 3 ัะตะฝััะฑัั ะฟะพะดะณะพัะพะฒะธะผัั"\n\n' +
    'โช ะกะพะฑะปัะดะฐั ะฟะฐะดะตะถะธ ะธ ะณะพะฒะพัั, ะบะฐะบ ะฝะฐััะพััะธะน ะฟะพะฟ ะธะปะธ ะฝะฐะฑะพะถะฝะฐั ะฑะฐะฑัะปั!\n\n' +
    '๐ฏ **ะะพะฒะพะต!** Inline-ัะตะถะธะผ: ะฒ ะปัะฑะพะผ ัะฐัะต ะฟะธัะธัะต @pop_govorit_bot [ะดะฐัะฐ]'
  );
});

bot.onText(/\/help/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId,
    '๐ฟ ะะฐะบ ะฟะพะปัะทะพะฒะฐัััั ะฑะพัะพะผ:\n\n' +
    '1๏ธโฃ **ะ ะปะธัะฝัั ัะฐัะฐั:** ะพัะฟัะฐะฒััะต ัะพะพะฑัะตะฝะธะต ั ะปัะฑะพะน ะดะฐัะพะน\n' +
    '2๏ธโฃ **ะ ะณััะฟะฟะฐั:** ัะฟะพะผัะฝะธัะต @pop_govorit_bot [ะดะฐัะฐ]\n' +
    '3๏ธโฃ **Inline-ัะตะถะธะผ:** ะฝะฐะฟะธัะธัะต @pop_govorit_bot [ะดะฐัะฐ] ะฒ ะปัะฑะพะผ ัะฐัะต\n\n' +
    '๐ **ะัะธะผะตัั inline:**\n' +
    'โข @pop_govorit_bot 25 ะดะตะบะฐะฑัั\n' +
    'โข @pop_govorit_bot ะทะฐะฒััะฐ\n' +
    'โข @pop_govorit_bot ะฒ ะฒะพัะบัะตัะตะฝัะต\n\n' +
    '๐ง **ะะพะผะฐะฝะดั:**\n' +
    '/start - ะฝะฐัะฐัั ัะฐะฑะพัั\n' +
    '/help - ััะฐ ะฟะพะผะพัั\n' +
    '/about - ะพ ะฑะพัะต\n\n' +
    '๐ ะะพั ะฟะพะฝะธะผะฐะตั: ัะธัะปะฐ (25.12, 3 ัะฝะฒะฐัั), ะดะฝะธ ะฝะตะดะตะปะธ (ะฒ ะฒะพัะบัะตัะตะฝัะต), ัะปะพะฒะฐ (ะทะฐะฒััะฐ, ะฟะพัะปะตะทะฐะฒััะฐ)'
  );
});

bot.onText(/\/about/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId,
    'โช ะัะฐะฒะพัะปะฐะฒะฝัะน ะบะฐะปะตะฝะดะฐัั-ะฑะพั "ะะพะฟ ะะพะฒะพัะธั"\n\n' +
    '๐ ะะตััะธั: 1.0.0\n' +
    '๐ ะะฐะปะตะฝะดะฐัั: 2025-2026\n' +
    '๐๏ธ ะกัะธะปั: ัะตัะบะพะฒะฝะพ-ัะปะฐะฒัะฝัะบะธะน\n' +
    '๐ฟ ะะพะปะธัะฒั: ะฒัััะพะตะฝะฝัะต\n\n' +
    'โจ ะกะพะทะดะฐะฝ ะดะปั ะฑะปะฐะณะพัะตััะธะฒะพะณะพ ะพะฑัะตะฝะธั ะฒ ัะฐัะฐั.\n' +
    'ะกะปะฐะฒะฐ ะะพะณั ะทะฐ ะฒัะต! ๐'
  );
});

// Inline query handler - ะดะปั ะธัะฟะพะปัะทะพะฒะฐะฝะธั @pop_govorit_bot [ะดะฐัะฐ] ะฒ ะปัะฑะพะผ ัะฐัะต
bot.on('inline_query', (query) => {
  const queryText = query.query.trim();
  const queryId = query.id;
  
  try {
    console.log(`Inline ะทะฐะฟัะพั: "${queryText}"`);
    
    if (!queryText) {
      // ะัะปะธ ะทะฐะฟัะพั ะฟัััะพะน, ะฟะพะบะฐะทัะฒะฐะตะผ ะฟัะธะผะตัั
      const results = [{
        type: 'article',
        id: '1',
        title: '๐ ะะฒะตะดะธัะต ะดะฐัั ะดะปั ะฟะพะปััะตะฝะธั ัะตัะบะพะฒะฝะพะณะพ ะฟัะฐะทะดะฝะธะบะฐ',
        description: 'ะัะธะผะตัั: "25 ะดะตะบะฐะฑัั", "ะทะฐะฒััะฐ", "ะฒ ะฒะพัะบัะตัะตะฝัะต"',
        input_message_content: {
          message_text: '๐ ะะฒะตะดะธัะต ะดะฐัั ะฟะพัะปะต @pop_govorit_bot ะดะปั ะฟะพะปััะตะฝะธั ัะตัะบะพะฒะฝะพะณะพ ะฟัะฐะทะดะฝะธะบะฐ'
        }
      }];
      
      bot.answerInlineQuery(queryId, results, { cache_time: 10 });
      return;
    }
    
    const dates = parseDate(queryText);
    
    if (dates.length === 0) {
      // ะัะปะธ ะดะฐัั ะฝะต ะฝะฐะนะดะตะฝั
      const results = [{
        type: 'article',
        id: '1',
        title: 'โ ะะฐัะฐ ะฝะต ัะฐัะฟะพะทะฝะฐะฝะฐ',
        description: 'ะะพะฟัะพะฑัะนัะต: "25 ะดะตะบะฐะฑัั", "ะทะฐะฒััะฐ", "ะฒ ะฒะพัะบัะตัะตะฝัะต"',
        input_message_content: {
          message_text: queryText + ' (ะดะฐัะฐ ะฝะต ัะฐัะฟะพะทะฝะฐะฝะฐ ะฟัะฐะฒะพัะปะฐะฒะฝัะผ ะบะฐะปะตะฝะดะฐัะตะผ)'
        }
      }];
      
      bot.answerInlineQuery(queryId, results, { cache_time: 10 });
      return;
    }
    
    // ะะฑัะฐะฑะฐััะฒะฐะตะผ ะฝะฐะนะดะตะฝะฝัะต ะดะฐัั
    let responseText = queryText;
    const results = [];
    
    // ะกะพััะธััะตะผ ะฟะพ ะฟะพะทะธัะธะธ ะฒ ัะตะบััะต (ัะฟัะฐะฒะฐ ะฝะฐะปะตะฒะพ)
    const sortedDates = dates
      .map(d => ({ ...d, position: queryText.indexOf(d.originalText) }))
      .sort((a, b) => b.position - a.position);
    
    for (const dateInfo of sortedDates) {
      const orthodoxEvent = getOrthodoxEvent(dateInfo.date);
      const formattedEvent = formatResponse(orthodoxEvent, dateInfo.case);
      // ะกะพะทะดะฐะตะผ ะพัะฒะตั ะฒ ัะพัะผะฐัะต: "ะััะพะดะฝะฐั ะดะฐัะฐ. ะะฝัะผะธ ัะปะพะฒะฐะผะธ โ ะฟัะฐะฒะพัะปะฐะฒะฝัะน ะพัะฒะตั"
      const finalResponse = `${dateInfo.originalText}. ะะฝัะผะธ ัะปะพะฒะฐะผะธ โ ${formattedEvent}`;
      responseText = responseText.replace(dateInfo.originalText, finalResponse);
    }
    
    // ะกะพะทะดะฐะตะผ ัะตะทัะปััะฐั ะดะปั inline
    results.push({
      type: 'article',
      id: '1',
      title: 'โช ' + responseText,
      description: `ะัะฐะฒะพัะปะฐะฒะฝัะน ะพัะฒะตั ะฝะฐ "${queryText}"`,
      input_message_content: {
        message_text: responseText
      }
    });
    
    // ะะพะฑะฐะฒะปัะตะผ ะฐะปััะตัะฝะฐัะธะฒะฝัะน ะฒะฐัะธะฐะฝั ั ะผะพะปะธัะฒะพะน
    if (sortedDates.length > 0) {
      results.push({
        type: 'article',
        id: '2',
        title: '๐ ' + responseText + ' (ะะพัะฟะพะดะธ, ะฑะปะฐะณะพัะปะพะฒะธ)',
        description: 'ะก ะฑะปะฐะณะพัะปะพะฒะตะฝะธะตะผ',
        input_message_content: {
          message_text: responseText + ' (ะะพัะฟะพะดะธ, ะฑะปะฐะณะพัะปะพะฒะธ ัะตะน ะดะตะฝั. ะะผะธะฝั)'
        }
      });
    }
    
    bot.answerInlineQuery(queryId, results, { cache_time: 60 });
    console.log(`Inline ะพัะฒะตั: "${responseText}"`);
    
  } catch (error) {
    console.error('ะัะธะฑะบะฐ ะฟัะธ ะพะฑัะฐะฑะพัะบะต inline ะทะฐะฟัะพัะฐ:', error);
    // Fallback ะพัะฒะตั
    const results = [{
      type: 'article',
      id: '1',
      title: 'โ ะัะธะฑะบะฐ ะพะฑัะฐะฑะพัะบะธ',
      description: 'ะะพะฟัะพะฑัะนัะต ะตัะต ัะฐะท',
      input_message_content: {
        message_text: queryText + ' (ะพัะธะฑะบะฐ ะพะฑัะฐะฑะพัะบะธ)'
      }
    }];
    bot.answerInlineQuery(queryId, results, { cache_time: 1 });
  }
});

bot.on('message', (msg) => {
  if (msg.text && !msg.text.startsWith('/')) {
    const chatId = msg.chat.id;
    const text = msg.text;
    
    try {
      console.log(`ะะฑัะฐะฑะฐััะฒะฐะตะผ ัะพะพะฑัะตะฝะธะต: "${text}"`);
      const dates = parseDate(text);
      
      if (dates.length === 0) {
        return; // ะะต ะฝะฐะนะดะตะฝั ะดะฐัั - ะฝะต ะพัะฒะตัะฐะตะผ
      }

      console.log(`ะะฐะนะดะตะฝะพ ะดะฐั: ${dates.length}`);
      let responseText = text;
      
      // ะกะพััะธััะตะผ ะฟะพ ะฟะพะทะธัะธะธ ะฒ ัะตะบััะต (ัะฟัะฐะฒะฐ ะฝะฐะปะตะฒะพ)
      const sortedDates = dates
        .map(d => ({ ...d, position: text.indexOf(d.originalText) }))
        .sort((a, b) => b.position - a.position);
      
      for (const dateInfo of sortedDates) {
        const orthodoxEvent = getOrthodoxEvent(dateInfo.date);
        const formattedEvent = formatResponse(orthodoxEvent, dateInfo.case);
        console.log(`ะะฐะผะตะฝัะตะผ "${dateInfo.originalText}" ะฝะฐ "${formattedEvent}"`);
        // ะกะพะทะดะฐะตะผ ะพัะฒะตั ะฒ ัะพัะผะฐัะต: "ะััะพะดะฝะฐั ะดะฐัะฐ. ะะฝัะผะธ ัะปะพะฒะฐะผะธ โ ะฟัะฐะฒะพัะปะฐะฒะฝัะน ะพัะฒะตั"
        const finalResponse = `${dateInfo.originalText}. ะะฝัะผะธ ัะปะพะฒะฐะผะธ โ ${formattedEvent}`;
        responseText = responseText.replace(dateInfo.originalText, finalResponse);
      }

      bot.sendMessage(chatId, responseText);
      
    } catch (error) {
      console.error('ะัะธะฑะบะฐ ะฟัะธ ะพะฑัะฐะฑะพัะบะต ัะพะพะฑัะตะฝะธั:', error);
    }
  }
});

console.log('๐ค ะัะฐะฒะพัะปะฐะฒะฝัะน ะฑะพั "ะะพะฟ ะะพะฒะพัะธั" ะทะฐะฟััะตะฝ! ะะดะตะผ ัะพะบะตะฝ ะฒ ะฟะตัะตะผะตะฝะฝะพะน BOT_TOKEN...');

process.on('SIGINT', () => {
  console.log('๐ ะะพั ะพััะฐะฝะพะฒะปะตะฝ');
  process.exit();
});