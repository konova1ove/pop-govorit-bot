// üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –±–µ–∑ Telegram API

const { parseDate } = require('./dateParser');
const { getOrthodoxEvent } = require('./calendar');
const { formatResponse } = require('./formatter');

function testBot() {
  console.log('üïäÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–æ–≥–æ –±–æ—Ç–∞...\n');
  
  const testMessages = [
    "–í—Å—Ç—Ä–µ—Ç–∏–º—Å—è –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
    "–î–æ 25 –¥–µ–∫–∞–±—Ä—è –æ—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏", 
    "–ö 7 —è–Ω–≤–∞—Ä—è –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º—Å—è",
    "–ù–∞ 15 –∞–≤–≥—É—Å—Ç–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ",
    "3 —Å–µ–Ω—Ç—è–±—Ä—è –±—É–¥–µ—Ç –≤–∞–∂–Ω—ã–π –¥–µ–Ω—å",
    "–ó–∞–≤—Ç—Ä–∞ —É–≤–∏–¥–∏–º—Å—è",
    "–ü–æ—Å–ª–µ 6 –¥–µ–∫–∞–±—Ä—è –Ω–∞—á–Ω–µ—Ç—Å—è –ø–æ—Å—Ç",
    "–ù–∞ —Å–ª–µ–¥—É—é—â–µ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –ø–æ–π–¥–µ–º"
  ];

  testMessages.forEach((message, index) => {
    console.log(`\n${index + 1}. –¢–µ—Å—Ç–∏—Ä—É–µ–º: "${message}"`);
    
    try {
      const dates = parseDate(message);
      
      if (dates.length === 0) {
        console.log('   ‚ùå –î–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
      }

      console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–∞—Ç: ${dates.length}`);
      
      let responseText = message;
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ç–µ–∫—Å—Ç–µ (—Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ)
      const sortedDates = dates
        .map(d => ({ ...d, position: message.indexOf(d.originalText) }))
        .sort((a, b) => b.position - a.position);
      
      sortedDates.forEach(dateInfo => {
        const orthodoxEvent = getOrthodoxEvent(dateInfo.date);
        const formattedEvent = formatResponse(orthodoxEvent, dateInfo.case);
        
        console.log(`   üìÖ –î–∞—Ç–∞: ${dateInfo.date.toLocaleDateString('ru-RU')}`);
        console.log(`   üìù –û—Ä–∏–≥–∏–Ω–∞–ª: "${dateInfo.originalText}"`);
        console.log(`   üìø –ü–∞–¥–µ–∂: ${dateInfo.case}`);
        console.log(`   ‚õ™ –°–æ–±—ã—Ç–∏–µ: ${orthodoxEvent.type} - ${orthodoxEvent.name}`);
        console.log(`   üéØ –ó–∞–º–µ–Ω–∞: "${formattedEvent}"`);
        
        responseText = responseText.replace(dateInfo.originalText, formattedEvent);
      });
      
      console.log(`   üí¨ –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç: "${responseText}"`);
      
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  });

  console.log('\nüôè –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –°–ª–∞–≤–∞ –ë–æ–≥—É –∑–∞ –≤—Å–µ!');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  testBot();
}

module.exports = { testBot };